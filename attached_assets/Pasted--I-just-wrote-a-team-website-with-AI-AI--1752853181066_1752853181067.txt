
# I just wrote a team website with AI
>關於某天上完資安跟AI營隊後心血來潮寫了一下團隊的網頁(其實幾個月前就有想法但沒甚麼動力動身ㄎ)，整體大概花了一天完成，大概分享一下製作過程及其內容



## 概覽

這是一個為 FRC（FIRST 機器人競賽）10390「GOOGIRL」隊伍所打造的全端網頁應用程式。「GOOGIRL」是一支全女性組成的機器人團隊。  
本網站作為隊伍的官方平台，展示機器人作品、獲獎紀錄、隊伍資訊，並提供聯絡功能。網站前端採用現代化的 React 技術，後端使用 Express.js，整體設計為中英文雙語介面，方便本地與國際觀眾使用。

## 使用者偏好

- 偏好使用簡單、日常語言進行溝通。

## 系統架構

本應用程式採用 monorepo 架構，前後端程式碼明確分離：

### 前端架構

- **框架**：React（使用 TypeScript）
- **樣式系統**：Tailwind CSS（含自定義設計系統）
- **UI 元件庫**：Radix UI 搭配 shadcn/ui
- **狀態管理**：
  - React Context：語言切換
  - TanStack Query：伺服器資料管理
- **路由**：Wouter（用於客戶端路由）
- **建構工具**：Vite（開發與正式版打包）

### 後端架構

- **執行環境**：Node.js 搭配 Express.js
- **語言**：TypeScript（使用 ES modules）
- **資料庫**：PostgreSQL（搭配 Drizzle ORM）
- **檔案上傳**：支援本地檔案上傳與儲存
- **Session 管理**：使用 connect-pg-simple 進行會話儲存
- **開發體驗**：整合 Vite 熱重載

## 核心功能

### 前台功能

1. **首頁展示**：
   - Hero 區域：團隊介紹與呼籲行動
   - 關於我們：團隊組成、媒體展示、產品介紹
   - 新聞區塊：最新消息動態展示
   - 機器人介紹：歷年機器人展示與 FRC 競賽說明
   - 獎項成就：各項競賽成果展示
   - 贊助商：合作夥伴展示
   - 聯絡我們：聯絡表單與社群媒體連結

2. **語言系統**：完整中英文雙語支援，一鍵切換
3. **響應式設計**：手機、平板、桌機完美適配
4. **互動元件**：彈出視窗、表單驗證、動畫效果

### 後台管理系統

1. **聯絡訊息管理**：
   - 查看所有使用者聯絡訊息
   - 訊息詳情檢視
   - 直接回覆功能（連結至郵件軟體）

2. **新聞管理**：
   - 新增/刪除新聞文章
   - 中英文雙語內容編輯
   - 圖片上傳與 URL 支援
   - 新聞預覽功能

3. **媒體管理**：
   - 照片與影片上傳管理
   - 媒體分類（機器人、贊助商、產品、獎項、一般）
   - 時間自動分組與展開/收合功能
   - 顯示狀態控制
   - 本地檔案上傳支援

4. **即將推出功能**：
   - 機器人管理：歷年機器人資料管理
   - 團隊管理：不同屆別團隊成員管理
   - 獎項管理：成就與獎項資料管理

### 核心元件

#### 前端元件

1. **語言系統**：完整中英文雙語支援，透過 Context 控制
2. **UI 元件**：包括彈出視窗、表單、導覽列、響應式版面等
3. **頁面架構**：單頁應用（SPA），包含首頁、關於我們、機器人介紹、得獎紀錄、贊助單位與聯絡頁面
4. **響應式設計**：以行動裝置優先為設計原則
5. **檔案上傳**：支援拖拽上傳與瀏覽器選檔功能

#### 後端元件

1. **API 路由**：RESTful 結構，統一以 `/api` 開頭
2. **資料層**：使用 Drizzle ORM 與 PostgreSQL 儲存資料
3. **檔案處理**：支援圖片與影片上傳，自動檔案類型驗證
4. **靜態檔案服務**：整合靜態資源發佈，用於部署版本
5. **權限控制**：管理後台密碼保護與 Token 驗證

#### 共用元件

1. **資料結構定義**：集中管理資料庫 Schema，包含新聞、媒體、機器人等資料表
2. **型別定義**：前後端共享 TypeScript 型別
3. **檔案上傳系統**：統一的檔案處理與儲存機制

## 資料流程

1. **使用者互動**：透過瀏覽器操作 React 元件
2. **API 請求**：前端使用 TanStack Query 發送請求至後端 Express API
3. **資料處理**：後端處理請求，並透過 Drizzle 操作 PostgreSQL 資料庫
4. **檔案處理**：支援多媒體檔案上傳與儲存
5. **回應處理**：資料回傳至前端並更新介面狀態
6. **語言切換**：所有內容根據使用者語言偏好進行切換

## 外部相依套件

### 前端相依

- **UI 框架**：React（含 react, react-dom, wouter 等）
- **樣式處理**：Tailwind CSS，PostCSS
- **元件庫**：Radix UI + shadcn/ui
- **狀態管理**：TanStack Query + React Context
- **表單處理**：React Hook Form + Zod
- **實用工具**：clsx、date-fns、lucide-react（圖示）
- **檔案處理**：支援多媒體檔案上傳與預覽

### 後端相依

- **伺服器框架**：Express.js（含 JSON 解析與日誌中介軟體）
- **資料庫驅動**：PostgreSQL + Neon serverless driver
- **ORM 工具**：Drizzle ORM + Drizzle Kit（資料庫遷移）
- **檔案上傳**：multer（檔案處理中介軟體）
- **Session 管理**：express-session + connect-pg-simple
- **開發工具**：tsx（執行 TypeScript）、esbuild（正式版打包）

### 開發環境相依

- **建構工具**：前端 Vite，後端 esbuild
- **TypeScript**：全堆疊皆使用 TypeScript
- **開發體驗**：熱重載、錯誤提示、Replit 整合

## 部署策略

### 開發環境

- **前端**：Vite dev server，支援熱重載（HMR）
- **後端**：使用 tsx 搭配自動重啟（類似 nodemon）
- **資料庫**：透過環境變數設定 PostgreSQL 連線
- **整合**：Vite proxy 設定支援 API 對接
- **檔案儲存**：開發環境使用本地 uploads 資料夾

### 正式部署

- **前端**：Vite 將靜態資源建置至 `dist/public`
- **後端**：使用 esbuild 打包為 `dist/index.js`
- **資料庫**：透過 `db:push` 執行 Drizzle 資料遷移
- **部署方式**：單一 Node.js 程序處理靜態資源與 API 請求
- **檔案管理**：支援檔案上傳與靜態資源服務

### 環境變數設定

- `DATABASE_URL`：PostgreSQL 連線字串（必填）
- `NODE_ENV`：環境辨識（開發或正式）
- `ADMIN_PASSWORD`：後台登入密碼（預設為 `FRC10390admin`）
- Session 設定：透過資料庫管理使用者會話資訊

## 資料庫結構

### 現有資料表

1. **contacts**：聯絡訊息儲存
   - 姓名、電子郵件、主旨、內容、建立時間

2. **news**：新聞文章管理
   - 中英文標題與內容
   - 圖片 URL、建立時間

3. **media**：媒體檔案管理
   - 中英文標題與描述
   - 媒體類型（照片/影片）
   - 分類、顯示狀態、建立時間

### 預計新增資料表

4. **robots**：機器人資料管理
5. **team_members**：團隊成員管理
6. **awards**：獎項成就管理

## 最新更新紀錄

### 2025-07-18 - 完整內容管理系統

- **媒體管理系統**：支援照片與影片上傳、分類管理、時間分組
- **檔案上傳功能**：本地檔案瀏覽器上傳，支援圖片與影片格式限制
- **新聞管理優化**：圖片上傳、內容預覽、即時編輯
- **資料庫擴充**：新增 media 資料表與相關 API
- **使用者體驗**：上傳進度提示、錯誤處理、成功通知

### 2025-07-18 - 資料庫整合與安全性強化

- **資料庫整合**：新增 PostgreSQL 與 Drizzle ORM
- **資料保存**：聯絡表單提交資料永久儲存在資料庫中
- **後台安全性**：後台 `/admin` 增加密碼保護
- **使用者驗證**：新增簡易 token 驗證系統
- **預設密碼**：`FRC10390admin`（可透過 `ADMIN_PASSWORD` 環境變數變更）

### 視覺與使用體驗改進

- **語言切換按鈕**：更清楚的顯示樣式（深色背景 + 邊框）
- **首頁背景**：從漸層改為照片，並加入 50% 透明遮罩
- **聯絡表單**：新增即時送出效果與提示通知（toast）
- **後台介面**：分頁式管理介面，支援多功能模組切換

## 未來發展方向

1. **完整的內容管理**：機器人、團隊成員、獎項的完整 CRUD 功能
2. **進階媒體功能**：影片串流、圖片壓縮、CDN 整合
3. **SEO 優化**：元標籤管理、Sitemap 生成
4. **社群整合**：Instagram、Facebook API 串接
5. **多語言擴充**：支援更多語言版本
6. **效能優化**：圖片懶載入、快取機制

這個專案展示了如何使用現代 Web 技術快速建構一個功能完整的團隊網站，從簡單的展示頁面發展為具備完整內容管理系統的平台。
